/******************************************************************************
 *
 * Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * Use of the Software is limited solely to applications:
 * (a) running on a Xilinx device, or
 * (b) that interact with a Xilinx device through a bus or interconnect.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the Xilinx shall not be used
 * in advertising or otherwise to promote the sale, use or other dealings in
 * this Software without prior written authorization from Xilinx.
 *
 ******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xplus_test.h"
#include "xparameters.h"
#include "xuartps.h"
#include "sleep.h"

u32 scan_in(u32 *p)
{
	char c=0;
	u32 state = 0;
	static u32 uart_rt = 0;
	static u32 ls_data = 0;
	while(XUartPs_IsReceiveData(STDIN_BASEADDRESS))
	{
		c = XUartPs_ReadReg(STDIN_BASEADDRESS, XUARTPS_FIFO_OFFSET);
		if(c == 's')
		{
			uart_rt = 0;
		}
		else if(c == 'e')
		{
			state = 1;
			ls_data = uart_rt;
		}
		else
		{
			uart_rt = uart_rt*10 + (c - '0');
		}
	}
	*p = ls_data;
	return state;
}

void std_uart_recv_test()
{
	u32 data = 0;
	while(1)
	{
		usleep(10);
		if(scan_in(&data))
		{
			printf("%u\r\n",data);
		}
	}
}

int main()
{
	init_platform();

	xil_printf("This is Jack's first HLS Experiment:\n\r");


	std_uart_recv_test();

	//Resource Initialize
	XPlus_test HLS_XPlus_test;
	XPlus_test_Config* HLS_XPlus_test_ptr;
	HLS_XPlus_test_ptr = XPlus_test_LookupConfig(XPAR_PLUS_TEST_0_DEVICE_ID);
	if (!HLS_XPlus_test_ptr)
	{
		xil_printf("ERROR: Lookup of accelerator configuration failed.\n\r");
		return XST_FAILURE;
	}
	xil_printf("Initialize the device\n\r");
	long status = XPlus_test_CfgInitialize(&HLS_XPlus_test, HLS_XPlus_test_ptr);
	if (status != XST_SUCCESS)
	{
		xil_printf("ERROR: Could not initialize accelerator.\n\r");
		return(-1);
	}
	XPlus_test_Set_x(&HLS_XPlus_test,30);
	XPlus_test_Initialize(&HLS_XPlus_test, XPAR_PLUS_TEST_0_DEVICE_ID);

	//
	XPlus_test_Start(&HLS_XPlus_test);
	while(XPlus_test_IsDone(&HLS_XPlus_test) == 0);

	int result = XPlus_test_Get_return(&HLS_XPlus_test);
	xil_printf("Output:%d\n\r",result);

	cleanup_platform();
	return 0;
}
